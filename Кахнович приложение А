&НаКлиенте
Перем МассивЗагрузки;
&НаСервере
Процедура ПриОткрытииНаСервере()
	ТабличнаяЧасть = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	ТЗНоменклатура = ПолучитьНоменклатуру();	
	ПараметрыОтбора = Новый Структура("Родитель",  "00000000-0000-0000-0000-000000000000");
	ПараметрыОтбора.Вставить("Тип", 1);
	Выборка = ТЗНоменклатура.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Строка ИЗ Выборка Цикл
		КорневаяГруппа = ТабличнаяЧасть.Строки.Добавить();
		КорневаяГруппа.Название = Строка.Имя;
		КорневаяГруппа.ИДНом = Строка.ИДНом;
		КорневаяГруппа.ЭтоГруппа = Строка.ЭтоГруппа;
		ЗаполнитьДеревоРекурсивно(КорневаяГруппа, Строка.ИДНом, ТЗНоменклатура, ТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТабличнаяЧасть,"ДеревоНоменклатуры"); 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	МассивЗагрузки = Новый Массив;
	ПриОткрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРекурсивно(НоваяГруппа, КодРодителя, ТЗНоменклатура, ТабличнаяЧасть)
	ПараметрыОтбора = Новый Структура("Родитель",  КодРодителя);
	Выборка = ТЗНоменклатура.НайтиСтроки(ПараметрыОтбора);
	
	Если Выборка.Количество() <> 0 Тогда
		Для Каждого Строка Из Выборка Цикл
			НовыйЭлемент = НоваяГруппа.Строки.Добавить();
			НовыйЭлемент.Название = Строка.Имя;
			НовыйЭлемент.ИДНом = Строка.ИДНом;
			НовыйЭлемент.ЭтоГруппа = Строка.ЭтоГруппа;
			Если Строка.ЭтоГруппа = 1 Тогда 
				ЗаполнитьДеревоРекурсивно(НовыйЭлемент, Строка.ИДНом, ТЗНоменклатура, ТабличнаяЧасть);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные.ЭтоГруппа = "Да" Тогда
		Элемент.ТолькоПросмотр = Истина;
	Иначе
		Элемент.ТолькоПросмотр = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РаскрытьВсеГруппы(Команда)
	тЭлементы = ДеревоНоменклатуры.ПолучитьЭлементы();
	Если РаскрытьВсеГруппы = Истина Тогда
		Для Каждого тСтр Из тЭлементы Цикл
			Элементы.ДеревоНоменклатуры.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	Иначе
		СвернутьРекурсия(тЭлементы);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРекурсия(тЭлементы)
	Для Каждого тСтр Из тЭлементы Цикл
		тСтрЭлементы = тСтр.ПолучитьЭлементы();
		СвернутьРекурсия(тСтрЭлементы);
		Элементы.ДеревоНоменклатуры.Свернуть(тСтр.ПолучитьИдентификатор());
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыДобавитьВБазуПриИзменении(Элемент)
	Если Элемент.Родитель.ТекущиеДанные.ДобавитьВБазу = Истина Тогда
		МассивЗагрузки.Добавить(Элемент.Родитель.ТекущиеДанные.ИДНом);
	Иначе
		Индекс = МассивЗагрузки.Найти(Элемент.Родитель.ТекущиеДанные.ИДНом);
		МассивЗагрузки.Удалить(Индекс);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВБазуДанныхНаСервере(МассивЗагрузки)
	РецептОбразец = Документы.питРецептура.НайтиПоНомеру("СМUP-000001",Дата(2020,01,01));
	НоменклатураОбразец = Справочники.Номенклатура.НайтиПоКоду("UP-00000081");
	ТекПользователь = Пользователи.ТекущийПользователь();
	//получаем таблицу номенклатуры
	ТЗНоменклатура = ПолучитьНоменклатуру();
	ДБФ = Новый XBase;
	//получаем таблицу ингредиентов
	ДБФ.ОткрытьФайл("\\SQLSERVER\1c_base$\obmen\ОбщепитDBF\doctable.dbf");
	ТЗИнгредиенты = Новый ТаблицаЗначений;
	КвалификаторыСтроки = Новый КвалификаторыСтроки();
	ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	ОписаниеЧисла =	Новый ОписаниеТипов("Число");
	ТЗИнгредиенты.Колонки.Добавить("ИДДок", ОписаниеСтроки);
	ТЗИнгредиенты.Колонки.Добавить("НомерСтроки", ОписаниеЧисла);
	ТЗИнгредиенты.Колонки.Добавить("ИДНом", ОписаниеСтроки);
	ТЗИнгредиенты.Колонки.Добавить("Брутто", ОписаниеЧисла);
	ТЗИнгредиенты.Колонки.Добавить("Нетто", ОписаниеЧисла);
	ТЗИнгредиенты.Колонки.Добавить("Выход", ОписаниеЧисла);
	ТЗИнгредиенты.Колонки.Добавить("MUNIT", ОписаниеСтроки);
	ТЗИнгредиенты.Колонки.Добавить("Коэфицент", ОписаниеЧисла);
	ТЗИнгредиенты.Колонки.Добавить("ЭтоСпеция", Новый ОписаниеТипов("Булево"));
	ТЗИнгредиенты.Колонки.Добавить("Примечание", ОписаниеСтроки);
	Пока ДБФ.Следующая() Цикл
		Строка = ТЗИнгредиенты.Добавить();
		Строка.ИДДок = ДБФ.ID_DOC;
		Строка.НомерСтроки = ДБФ.STR_NOM;
		Строка.ИДНом = ДБФ.ID_NOM;
		Строка.Брутто = ДБФ.BRUTTO;
		Строка.Нетто = ДБФ.NETTO;
		Строка.Выход = ДБФ.OUTPUT;
		Строка.MUNIT = ДБФ.MUNIT;
		Строка.Коэфицент = ДБФ.KOEFF;
		Строка.ЭтоСпеция = ДБФ.SPECIA;
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	//получаем таблицу для сопоставления ИД рецепта и ИД в номенклатуры
	ДБФ.ОткрытьФайл("\\SQLSERVER\1c_base$\obmen\ОбщепитDBF\DOCUMENT.DBF");
	ТЗСоответствие = Новый ТаблицаЗначений;
	ТЗСоответствие.Колонки.Добавить("ИДДок", ОписаниеСтроки);
	ТЗСоответствие.Колонки.Добавить("ИДНом", ОписаниеСтроки);
	ТЗСоответствие.Колонки.Добавить("Выход", ОписаниеСтроки);
	ТЗСоответствие.Колонки.Добавить("Основное", ОписаниеЧисла);
	Пока ДБФ.Следующая() Цикл 
		Строка = ТЗСоответствие.Добавить();
		Строка.ИДДок = ДБФ.ID_DOC;
		Строка.ИДНом = ДБФ.ID_NOM;
		Строка.Выход = СокрЛП(ДБФ.OUT);
		Строка.Основное = ДБФ.MAIN;
	КонецЦикла;
	НайденныеИДНом = Новый Массив;
	//строим отображение рецептов на номенклатуру
	Для Каждого Блюдо Из МассивЗагрузки Цикл
		ПараметрыОтбора = Новый Структура("ИДНом",  Блюдо);
		ПараметрыОтбора.Вставить("Основное",1);
		Выборка = ТЗСоответствие.НайтиСтроки(ПараметрыОтбора);
		НайденныеИДНом.Добавить(Выборка[0]);
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	
	ДБФ.ОткрытьФайл("\\SQLSERVER\1c_base$\obmen\ОбщепитDBF\TECHNOL.DBF");
	ТЗТехнология = Новый ТаблицаЗначений;
	ТЗТехнология.Колонки.Добавить("ИДДок", ОписаниеСтроки);
	ТЗТехнология.Колонки.Добавить("Строка", ОписаниеСтроки);
	Пока ДБФ.Следующая() Цикл 
		Стр = ТЗТехнология.Добавить();
		Стр.ИДДок = ДБФ.ID_DOC;
		Стр.Строка = ДБФ.TEXT;
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	
	#область Ссылки
	ВидГотовыеБлюда = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Готовые блюда");
	Родитель = Справочники.Номенклатура.НайтиПоНаименованию("Загруженные блюда");
	РодительИнг = Справочники.Номенклатура.НайтиПоНаименованию("Загруженные ингредиенты");
	Производитель = Справочники.Производители.НайтиПоНаименованию("ФКП ""СМЗ""");
	ФКПСМЗ = Справочники.Организации.НайтиПоНаименованию("ФКП ""Саранский механический завод""");
	Столовая = Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию("Столовая");
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Готовая продукция собственного производства");
	Шт = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("шт");
	Кг = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("кг");
	Г = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("г");
	Изд = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("изд");
	СтоловаяПодразд = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Цех №15 (столовая)");
	ГотовыеБлюда = Справочники.СтатьиКалькуляции.НайтиПоНаименованию("Готовые блюда");
	Полуфабрикаты = Справочники.СтатьиКалькуляции.НайтиПоНаименованию("Полуфабрикаты приобретенные на стороне");  
	#конецОбласти
	
	Для Каждого Рецепт Из НайденныеИДНом Цикл
		ПараметрыОтбора = Новый Структура("ИДНом",  Рецепт.ИДНом);
		НомБлюда = ТЗНоменклатура.НайтиСтроки(ПараметрыОтбора);
		//создаем номенклатуру для блюда
		НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
		НовыйЭлемент.Наименование = НомБлюда[0].Имя;
		НовыйЭлемент.НаименованиеПолное = НомБлюда[0].Имя;
		НовыйЭлемент.ВидНоменклатуры = ВидГотовыеБлюда;
		НовыйЭлемент.Родитель = Родитель;
		НовыйЭлемент.Качество = Перечисления.ГрадацииКачества.Новый;
		НовыйЭлемент.ЕдиницаИзмерения = Шт;
		НовыйЭлемент.Производитель = Производитель;
		НовыйЭлемент.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.ГруппаФинансовогоУчета = Столовая;
		НовыйЭлемент.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
		НовыйЭлемент.ВестиУчетСертификатовНоменклатуры = ИСТИНА;
		НовыйЭлемент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		НовыйЭлемент.ВладелецТоварныхКатегорий = ВидНоменклатуры;
		НовыйЭлемент.ЕдиницаДляОтчетов = Шт;
		НовыйЭлемент.питВидНоменклатуры = Перечисления.питВидыНоменклатуры.Блюдо;
		НовыйЭлемент.питТарнаяЕдиницаИзмерения =Шт;
		НовыйЭлемент.питРецептурнаяУпаковка = Изд;
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			Сообщить("Блюдо " + НовыйЭлемент.Наименование + " уже добавлено в номенклатуру");
		КонецПопытки;
		НовыйЭлемент = Справочники.Номенклатура.НайтиПоНаименованию(НомБлюда[0].Имя);
		
		//создаём рецепт на блюдо
		ПараметрыОтбора = Новый Структура("ИДДок",  Рецепт.ИДДок);
		МассивТехнологий = ТЗТехнология.НайтиСтроки(ПараметрыОтбора);
		Технология = "";
		Для Каждого Строка Из МассивТехнологий Цикл
			Технология = Технология + Строка.Строка;
		КонецЦикла;
		НовыйРецепт = Документы.питРецептура.СоздатьДокумент();
		НовыйРецепт.Дата = ТекущаяДата();
		НовыйРецепт.Наименование = НомБлюда[0].Имя;
		НовыйРецепт.Номенклатура = НовыйЭлемент;
		НовыйРецепт.Организация = ФКПСМЗ;
		НовыйРецепт.Подразделение = СтоловаяПодразд;
		НовыйРецепт.ХозяйственнаяОперация = Перечисления.питХозяйственныеОперации.РецептураПриготовление;
		НовыйРецепт.КоличествоУпаковок = 1;
		НовыйРецепт.Количество = 1;
		НовыйРецепт.СпособРасчетаКалорийности = Перечисления.питСпособыРасчетаКалорийности.Суммированием;
		НовыйРецепт.ТехнологияПриготовления = Технология;
		НовыйРецепт.ФормулаРасчетаКалорийности = "4 * [Белки] + 9 * [Жиры] + 4 * [Углеводы] + 7 * [Алкоголь]";
		НовыйРецепт.Ответственный = ТекПользователь;
		НовыйРецепт.Упаковка = Изд;
		Если УдаляемНеБуквы(Рецепт.Выход) = "кг" Тогда
			НовыйРецепт.Выход = УдаляемНеЧисла(Рецепт.Выход)*1000;
		Иначе
			НовыйРецепт.Выход = УдаляемНеЧисла(Рецепт.Выход);
		КонецЕсли;
		НовыйРецепт.ВыходВес = НовыйРецепт.Выход;
		НовыйРецепт.СтатьяКалькуляции = ГотовыеБлюда;
		
		ПараметрыОтбора =  Новый Структура("ИДДок",  Рецепт.ИДДок);
		Выборка = ТЗИнгредиенты.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Ингредиент Из Выборка Цикл
			ПараметрыОтбора = Новый Структура("ИДНом",  Ингредиент.ИДНом);
			НомИнгредиента = ТЗНоменклатура.НайтиСтроки(ПараметрыОтбора);
			НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			НовыйЭлемент.Наименование = НомИнгредиента[0].Имя;
			НовыйЭлемент.НаименованиеПолное = НомИнгредиента[0].Имя;
			НовыйЭлемент.ВидНоменклатуры = ВидГотовыеБлюда;
			НовыйЭлемент.Родитель = РодительИнг;
			НовыйЭлемент.Качество = Перечисления.ГрадацииКачества.Новый;
			Если Ингредиент.Коэфицент = 1 Тогда
				НовыйЭлемент.ЕдиницаИзмерения = Кг; 
			Иначе
			    НовыйЭлемент.ЕдиницаИзмерения = Г;
			КонецЕсли;
			НовыйЭлемент.Производитель = Производитель;
			НовыйЭлемент.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
			НовыйЭлемент.ГруппаФинансовогоУчета = Столовая;
			НовыйЭлемент.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
			НовыйЭлемент.ВестиУчетСертификатовНоменклатуры = ИСТИНА;
			НовыйЭлемент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
			НовыйЭлемент.ВладелецТоварныхКатегорий = ВидНоменклатуры;
			НовыйЭлемент.ЕдиницаДляОтчетов = Шт;
			НовыйЭлемент.питВидНоменклатуры = Перечисления.питВидыНоменклатуры.Товар;
			Попытка
				НовыйЭлемент.Записать();
			Исключение
				Сообщить("Ингредиент " + НовыйЭлемент.Наименование + " уже загружен в номенклатуру");
			КонецПопытки;
			НовыйЭлемент = Справочники.Номенклатура.НайтиПоНаименованию(НомИнгредиента[0].Имя);
			
			//заполняем ингредиенты для блюда
			ИнгредиентДок = НовыйРецепт.Ингредиенты.Добавить();
			ИнгредиентДок.Номенклатура = НовыйЭлемент;
			ИнгредиентДок.КоличествоУпаковокБрутто = Ингредиент.Брутто;
			ИнгредиентДок.КоличествоУпаковокНетто = Ингредиент.Нетто;
			ИнгредиентДок.ПроцентПотерьПриХолоднойОбработке = 100 - ((Ингредиент.Нетто/Ингредиент.Брутто)*100);
			ИнгредиентДок.КоличествоУпаковокВыход = Ингредиент.Выход;
			ИнгредиентДок.ПроцентПотерьПриГорячейОбработке = 100 -((Ингредиент.Выход/Ингредиент.Нетто)*100);
			ИнгредиентДок.СтатьяКалькуляции = Полуфабрикаты;
			Если Ингредиент.ЭтоСпеция = 1 Тогда
				ИнгредиентДок.Специя = ИСТИНА;
			Иначе
				ИнгредиентДок.Специя = ЛОЖЬ;
			КонецЕсли;
			ИнгредиентДок.Упаковка = НовыйЭлемент.ЕдиницаИзмерения; 
			Если НовыйЭлемент.ЕдиницаИзмерения = Г Тогда
				ИнгредиентДок.КоличествоБрутто = Ингредиент.Брутто * 0.001;
				ИнгредиентДок.КоличествоНетто = Ингредиент.Нетто * 0.001;
				ИнгредиентДок.КоличествоВыход = Ингредиент.Выход * 0.001;
			Иначе
				ИнгредиентДок.КоличествоБрутто = Ингредиент.Брутто;
				ИнгредиентДок.КоличествоНетто = Ингредиент.Нетто;
				ИнгредиентДок.КоличествоВыход = Ингредиент.Выход;
			КонецЕсли;	                                        
		КонецЦикла;
		НовыйРецепт.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВБазуДанных(Команда)
	ЗагрузитьВБазуДанныхНаСервере(МассивЗагрузки);
КонецПроцедуры

Функция ПолучитьНоменклатуру() 
	ДБФ = Новый XBase;
	ДБФ.ОткрытьФайл("\\SQLSERVER\1c_base$\obmen\ОбщепитDBF\NOMENCL.DBF");
	ТЗНоменклатура = Новый ТаблицаЗначений;
	КвалификаторыСтроки = Новый КвалификаторыСтроки();
    ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	ТЗНоменклатура.Колонки.Добавить("ИДНом",ОписаниеСтроки);
	ТЗНоменклатура.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ТЗНоменклатура.Колонки.Добавить("Код", ОписаниеСтроки);
	ТЗНоменклатура.Колонки.Добавить("Родитель", ОписаниеСтроки);
	ТЗНоменклатура.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ТЗНоменклатура.Колонки.Добавить("Имя", ОписаниеСтроки);
	ТЗНоменклатура.Колонки.Добавить("Тип", Новый ОписаниеТипов("Число"));
	ТЗНоменклатура.Колонки.Добавить("BUNIT", ОписаниеСтроки);
	ТЗНоменклатура.Колонки.Добавить("MUNIT", ОписаниеСтроки);
	Пока ДБФ.Следующая() Цикл
		Строка = ТЗНоменклатура.Добавить();
		Строка.ИДНом = ДБФ.ID_NOM;
		Строка.Уровень = ДБФ.LEVEL;
		Строка.Код = ДБФ.CODE;
		Строка.Родитель = ДБФ.PARENT;
		Строка.ЭтоГруппа = ДБФ.ISGROUP;
		Строка.Имя = СокрЛП(ДБФ.NAME);
		Строка.Тип = ДБФ.TYPE;
		Строка.BUNIT = ДБФ.BUNIT;
		Строка.MUNIT = ДБФ.MUNIT;
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	Возврат ТЗНоменклатура;
КонецФункции
	
Функция УдаляемНеЧисла(НашаСтрокаДляРазбора)
	ОбработаннаяСтрокаСтр = СокрЛП(НашаСтрокаДляРазбора);
	РезультатРаботы = ОбработаннаяСтрокаСтр;
	Для н=1 по СтрДлина(ОбработаннаяСтрокаСтр) Цикл
		ТекСимвол = Сред(ОбработаннаяСтрокаСтр,н,1);
		Если Найти("0123456789,",ТекСимвол) = 0 Тогда
			РезультатРаботы = СтрЗаменить(РезультатРаботы,ТекСимвол,""); 
		КонецЕсли; 
	КонецЦикла; 
	Возврат РезультатРаботы;
КонецФункции

Функция УдаляемНеБуквы(НашаСтрокаДляРазбора)
	ОбработаннаяСтрокаСтр = СокрЛП(НашаСтрокаДляРазбора);
	РезультатРаботы = ОбработаннаяСтрокаСтр;
	Для н=1 по СтрДлина(ОбработаннаяСтрокаСтр) Цикл
		ТекСимвол = Сред(ОбработаннаяСтрокаСтр,н,1);
		Если Найти("кг",ТекСимвол) = 0 Тогда
			РезультатРаботы = СтрЗаменить(РезультатРаботы,ТекСимвол,""); 
		КонецЕсли; 
	КонецЦикла; 
	Возврат РезультатРаботы;
КонецФункции 
